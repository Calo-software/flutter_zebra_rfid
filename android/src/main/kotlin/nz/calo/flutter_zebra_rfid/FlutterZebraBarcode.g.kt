// Autogenerated from Pigeon (v21.2.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterBarcodeError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): FlutterBarcodeError {
  return FlutterBarcodeError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterBarcodeError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class ScannerConnectionType(val raw: Int) {
  BLUETOOTH(0),
  USB(1);

  companion object {
    fun ofRaw(raw: Int): ScannerConnectionType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ScannerConnectionStatus(val raw: Int) {
  CONNECTING(0),
  CONNECTED(1),
  DISCONNECTING(2),
  DISCONNECTED(3),
  ERROR(4);

  companion object {
    fun ofRaw(raw: Int): ScannerConnectionStatus? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class BarcodeScanner (
  val name: String? = null,
  val id: Long,
  val model: String? = null,
  val serialNumber: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): BarcodeScanner {
      val name = pigeonVar_list[0] as String?
      val id = pigeonVar_list[1].let { num -> if (num is Int) num.toLong() else num as Long }
      val model = pigeonVar_list[2] as String?
      val serialNumber = pigeonVar_list[3] as String
      return BarcodeScanner(name, id, model, serialNumber)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      name,
      id,
      model,
      serialNumber,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class Barcode (
  val data: String,
  val scannerId: Long,
  val scannerType: Long? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): Barcode {
      val data = pigeonVar_list[0] as String
      val scannerId = pigeonVar_list[1].let { num -> if (num is Int) num.toLong() else num as Long }
      val scannerType = pigeonVar_list[2].let { num -> if (num is Int) num.toLong() else num as Long? }
      return Barcode(data, scannerId, scannerType)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      data,
      scannerId,
      scannerType,
    )
  }
}
private object FlutterZebraBarcodePigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          ScannerConnectionType.ofRaw(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          ScannerConnectionStatus.ofRaw(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          BarcodeScanner.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          Barcode.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is ScannerConnectionType -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is ScannerConnectionStatus -> {
        stream.write(130)
        writeValue(stream, value.raw)
      }
      is BarcodeScanner -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is Barcode -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface FlutterZebraBarcode {
  /** Returns list with names of available readers for specified `connectionType`. */
  fun updateAvailableScanners(callback: (Result<Unit>) -> Unit)
  /** Connects to a reader with `readerId` ID. */
  fun connectScanner(scannerId: Long, callback: (Result<Unit>) -> Unit)
  /** Reader currently in use */
  fun currentScanner(): BarcodeScanner?

  companion object {
    /** The codec used by FlutterZebraBarcode. */
    val codec: MessageCodec<Any?> by lazy {
      FlutterZebraBarcodePigeonCodec
    }
    /** Sets up an instance of `FlutterZebraBarcode` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: FlutterZebraBarcode?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_zebra_barcode.FlutterZebraBarcode.updateAvailableScanners$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.updateAvailableScanners{ result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_zebra_barcode.FlutterZebraBarcode.connectScanner$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val scannerIdArg = args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            api.connectScanner(scannerIdArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_zebra_barcode.FlutterZebraBarcode.currentScanner$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.currentScanner())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class FlutterZebraBarcodeCallbacks(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by FlutterZebraBarcodeCallbacks. */
    val codec: MessageCodec<Any?> by lazy {
      FlutterZebraBarcodePigeonCodec
    }
  }
  fun onAvailableScannersChanged(readersArg: List<BarcodeScanner>, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.flutter_zebra_barcode.FlutterZebraBarcodeCallbacks.onAvailableScannersChanged$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(readersArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterBarcodeError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onScannerConnectionStatusChanged(statusArg: ScannerConnectionStatus, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.flutter_zebra_barcode.FlutterZebraBarcodeCallbacks.onScannerConnectionStatusChanged$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(statusArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterBarcodeError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onBarcodeRead(barcodeArg: Barcode, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.flutter_zebra_barcode.FlutterZebraBarcodeCallbacks.onBarcodeRead$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(barcodeArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterBarcodeError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
