// Autogenerated from Pigeon (v21.2.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class FlutterBarcodeError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "FlutterBarcodeError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? FlutterBarcodeError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> FlutterBarcodeError {
  return FlutterBarcodeError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum ScannerConnectionType: Int {
  case bluetooth = 0
  case usb = 1
}

enum ScannerConnectionStatus: Int {
  case connecting = 0
  case connected = 1
  case disconnecting = 2
  case disconnected = 3
  case error = 4
}

/// Generated class from Pigeon that represents data sent in messages.
struct BarcodeScanner {
  var name: String? = nil
  var id: Int64
  var model: String? = nil
  var serialNumber: String



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> BarcodeScanner? {
    let name: String? = nilOrValue(pigeonVar_list[0])
    let id = pigeonVar_list[1] is Int64 ? pigeonVar_list[1] as! Int64 : Int64(pigeonVar_list[1] as! Int32)
    let model: String? = nilOrValue(pigeonVar_list[2])
    let serialNumber = pigeonVar_list[3] as! String

    return BarcodeScanner(
      name: name,
      id: id,
      model: model,
      serialNumber: serialNumber
    )
  }
  func toList() -> [Any?] {
    return [
      name,
      id,
      model,
      serialNumber,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct Barcode {
  var data: String
  var scannerId: Int64
  var scannerType: Int64? = nil



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> Barcode? {
    let data = pigeonVar_list[0] as! String
    let scannerId = pigeonVar_list[1] is Int64 ? pigeonVar_list[1] as! Int64 : Int64(pigeonVar_list[1] as! Int32)
    let scannerType: Int64? = isNullish(pigeonVar_list[2]) ? nil : (pigeonVar_list[2] is Int64? ? pigeonVar_list[2] as! Int64? : Int64(pigeonVar_list[2] as! Int32))

    return Barcode(
      data: data,
      scannerId: scannerId,
      scannerType: scannerType
    )
  }
  func toList() -> [Any?] {
    return [
      data,
      scannerId,
      scannerType,
    ]
  }
}

private class FlutterZebraBarcodePigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        return ScannerConnectionType(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        return ScannerConnectionStatus(rawValue: enumResultAsInt)
      }
      return nil
    case 131:
      return BarcodeScanner.fromList(self.readValue() as! [Any?])
    case 132:
      return Barcode.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class FlutterZebraBarcodePigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? ScannerConnectionType {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? ScannerConnectionStatus {
      super.writeByte(130)
      super.writeValue(value.rawValue)
    } else if let value = value as? BarcodeScanner {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? Barcode {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class FlutterZebraBarcodePigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return FlutterZebraBarcodePigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return FlutterZebraBarcodePigeonCodecWriter(data: data)
  }
}

class FlutterZebraBarcodePigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = FlutterZebraBarcodePigeonCodec(readerWriter: FlutterZebraBarcodePigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol FlutterZebraBarcode {
  /// Returns list with names of available readers for specified `connectionType`.
  func updateAvailableScanners(completion: @escaping (Result<Void, Error>) -> Void)
  /// Connects to a reader with `readerId` ID.
  func connectScanner(scannerId: Int64, completion: @escaping (Result<Void, Error>) -> Void)
  /// Reader currently in use
  func currentScanner() throws -> BarcodeScanner?
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class FlutterZebraBarcodeSetup {
  static var codec: FlutterStandardMessageCodec { FlutterZebraBarcodePigeonCodec.shared }
  /// Sets up an instance of `FlutterZebraBarcode` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: FlutterZebraBarcode?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    /// Returns list with names of available readers for specified `connectionType`.
    let updateAvailableScannersChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_zebra_barcode.FlutterZebraBarcode.updateAvailableScanners\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      updateAvailableScannersChannel.setMessageHandler { _, reply in
        api.updateAvailableScanners { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      updateAvailableScannersChannel.setMessageHandler(nil)
    }
    /// Connects to a reader with `readerId` ID.
    let connectScannerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_zebra_barcode.FlutterZebraBarcode.connectScanner\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      connectScannerChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let scannerIdArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        api.connectScanner(scannerId: scannerIdArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      connectScannerChannel.setMessageHandler(nil)
    }
    /// Reader currently in use
    let currentScannerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_zebra_barcode.FlutterZebraBarcode.currentScanner\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      currentScannerChannel.setMessageHandler { _, reply in
        do {
          let result = try api.currentScanner()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      currentScannerChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol FlutterZebraBarcodeCallbacksProtocol {
  func onAvailableScannersChanged(readers readersArg: [BarcodeScanner], completion: @escaping (Result<Void, FlutterBarcodeError>) -> Void)
  func onScannerConnectionStatusChanged(status statusArg: ScannerConnectionStatus, completion: @escaping (Result<Void, FlutterBarcodeError>) -> Void)
  func onBarcodeRead(barcode barcodeArg: Barcode, completion: @escaping (Result<Void, FlutterBarcodeError>) -> Void)
}
class FlutterZebraBarcodeCallbacks: FlutterZebraBarcodeCallbacksProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: FlutterZebraBarcodePigeonCodec {
    return FlutterZebraBarcodePigeonCodec.shared
  }
  func onAvailableScannersChanged(readers readersArg: [BarcodeScanner], completion: @escaping (Result<Void, FlutterBarcodeError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.flutter_zebra_barcode.FlutterZebraBarcodeCallbacks.onAvailableScannersChanged\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([readersArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterBarcodeError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onScannerConnectionStatusChanged(status statusArg: ScannerConnectionStatus, completion: @escaping (Result<Void, FlutterBarcodeError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.flutter_zebra_barcode.FlutterZebraBarcodeCallbacks.onScannerConnectionStatusChanged\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([statusArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterBarcodeError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onBarcodeRead(barcode barcodeArg: Barcode, completion: @escaping (Result<Void, FlutterBarcodeError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.flutter_zebra_barcode.FlutterZebraBarcodeCallbacks.onBarcodeRead\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([barcodeArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterBarcodeError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
