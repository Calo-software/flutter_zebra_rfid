// Autogenerated from Pigeon (v21.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class FlutterRfidError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "FlutterRfidError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? FlutterRfidError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> FlutterRfidError {
  return FlutterRfidError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum ReaderConnectionType: Int {
  case bluetooth = 0
  case usb = 1
}

enum ReaderConnectionStatus: Int {
  case connecting = 0
  case connected = 1
  case disconnecting = 2
  case disconnected = 3
  case error = 4
}

enum ReaderConfigBatchMode: Int {
  case auto = 0
  case enabled = 1
  case disabled = 2
}

enum ReaderBeeperVolume: Int {
  case quiet = 0
  case low = 1
  case medium = 2
  case high = 3
}

/// Generated class from Pigeon that represents data sent in messages.
struct Reader {
  var name: String? = nil
  var id: Int64
  var info: ReaderInfo? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> Reader? {
    let name: String? = nilOrValue(__pigeon_list[0])
    let id = __pigeon_list[1] is Int64 ? __pigeon_list[1] as! Int64 : Int64(__pigeon_list[1] as! Int32)
    let info: ReaderInfo? = nilOrValue(__pigeon_list[2])

    return Reader(
      name: name,
      id: id,
      info: info
    )
  }
  func toList() -> [Any?] {
    return [
      name,
      id,
      info,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ReaderConfig {
  var transmitPowerIndex: Int64? = nil
  var beeperVolume: ReaderBeeperVolume? = nil
  var enableDynamicPower: Bool? = nil
  var enableLedBlink: Bool? = nil
  var batchMode: ReaderConfigBatchMode? = nil
  var scanBatchMode: ReaderConfigBatchMode? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> ReaderConfig? {
    let transmitPowerIndex: Int64? = isNullish(__pigeon_list[0]) ? nil : (__pigeon_list[0] is Int64? ? __pigeon_list[0] as! Int64? : Int64(__pigeon_list[0] as! Int32))
    let beeperVolume: ReaderBeeperVolume? = nilOrValue(__pigeon_list[1])
    let enableDynamicPower: Bool? = nilOrValue(__pigeon_list[2])
    let enableLedBlink: Bool? = nilOrValue(__pigeon_list[3])
    let batchMode: ReaderConfigBatchMode? = nilOrValue(__pigeon_list[4])
    let scanBatchMode: ReaderConfigBatchMode? = nilOrValue(__pigeon_list[5])

    return ReaderConfig(
      transmitPowerIndex: transmitPowerIndex,
      beeperVolume: beeperVolume,
      enableDynamicPower: enableDynamicPower,
      enableLedBlink: enableLedBlink,
      batchMode: batchMode,
      scanBatchMode: scanBatchMode
    )
  }
  func toList() -> [Any?] {
    return [
      transmitPowerIndex,
      beeperVolume,
      enableDynamicPower,
      enableLedBlink,
      batchMode,
      scanBatchMode,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ReaderInfo {
  var transmitPowerLevels: [Any?]
  var firmwareVersion: String
  var modelVersion: String
  var scannerName: String
  var serialNumber: String

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> ReaderInfo? {
    let transmitPowerLevels = __pigeon_list[0] as! [Any?]
    let firmwareVersion = __pigeon_list[1] as! String
    let modelVersion = __pigeon_list[2] as! String
    let scannerName = __pigeon_list[3] as! String
    let serialNumber = __pigeon_list[4] as! String

    return ReaderInfo(
      transmitPowerLevels: transmitPowerLevels,
      firmwareVersion: firmwareVersion,
      modelVersion: modelVersion,
      scannerName: scannerName,
      serialNumber: serialNumber
    )
  }
  func toList() -> [Any?] {
    return [
      transmitPowerLevels,
      firmwareVersion,
      modelVersion,
      scannerName,
      serialNumber,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct RfidTag {
  var id: String
  var rssi: Int64

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> RfidTag? {
    let id = __pigeon_list[0] as! String
    let rssi = __pigeon_list[1] is Int64 ? __pigeon_list[1] as! Int64 : Int64(__pigeon_list[1] as! Int32)

    return RfidTag(
      id: id,
      rssi: rssi
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      rssi,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct BatteryData {
  var level: Int64
  var isCharging: Bool
  var cause: String

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> BatteryData? {
    let level = __pigeon_list[0] is Int64 ? __pigeon_list[0] as! Int64 : Int64(__pigeon_list[0] as! Int32)
    let isCharging = __pigeon_list[1] as! Bool
    let cause = __pigeon_list[2] as! String

    return BatteryData(
      level: level,
      isCharging: isCharging,
      cause: cause
    )
  }
  func toList() -> [Any?] {
    return [
      level,
      isCharging,
      cause,
    ]
  }
}
private class FlutterZebraRfidPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      return Reader.fromList(self.readValue() as! [Any?])
    case 130:
      return ReaderConfig.fromList(self.readValue() as! [Any?])
    case 131:
      return ReaderInfo.fromList(self.readValue() as! [Any?])
    case 132:
      return RfidTag.fromList(self.readValue() as! [Any?])
    case 133:
      return BatteryData.fromList(self.readValue() as! [Any?])
    case 134:
      var enumResult: ReaderConnectionType? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = ReaderConnectionType(rawValue: enumResultAsInt)
      }
      return enumResult
    case 135:
      var enumResult: ReaderConnectionStatus? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = ReaderConnectionStatus(rawValue: enumResultAsInt)
      }
      return enumResult
    case 136:
      var enumResult: ReaderConfigBatchMode? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = ReaderConfigBatchMode(rawValue: enumResultAsInt)
      }
      return enumResult
    case 137:
      var enumResult: ReaderBeeperVolume? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = ReaderBeeperVolume(rawValue: enumResultAsInt)
      }
      return enumResult
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class FlutterZebraRfidPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? Reader {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? ReaderConfig {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? ReaderInfo {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? RfidTag {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? BatteryData {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? ReaderConnectionType {
      super.writeByte(134)
      super.writeValue(value.rawValue)
    } else if let value = value as? ReaderConnectionStatus {
      super.writeByte(135)
      super.writeValue(value.rawValue)
    } else if let value = value as? ReaderConfigBatchMode {
      super.writeByte(136)
      super.writeValue(value.rawValue)
    } else if let value = value as? ReaderBeeperVolume {
      super.writeByte(137)
      super.writeValue(value.rawValue)
    } else {
      super.writeValue(value)
    }
  }
}

private class FlutterZebraRfidPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return FlutterZebraRfidPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return FlutterZebraRfidPigeonCodecWriter(data: data)
  }
}

class FlutterZebraRfidPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = FlutterZebraRfidPigeonCodec(readerWriter: FlutterZebraRfidPigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol FlutterZebraRfid {
  /// Returns list with names of available readers for specified `connectionType`.
  func updateAvailableReaders(connectionType: ReaderConnectionType, completion: @escaping (Result<Void, Error>) -> Void)
  /// Connects to a reader with `readerId` ID.
  func connectReader(readerId: Int64, completion: @escaping (Result<Void, Error>) -> Void)
  /// Configures reader with `config`.
  func configureReader(config: ReaderConfig, shouldPersist: Bool, completion: @escaping (Result<Void, Error>) -> Void)
  /// Disconnects a reader with `readerName` name.
  func disconnectReader(completion: @escaping (Result<Void, Error>) -> Void)
  /// Trigger device status
  func triggerDeviceStatus(completion: @escaping (Result<Void, Error>) -> Void)
  /// Reader currently in use
  func currentReader() throws -> Reader?
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class FlutterZebraRfidSetup {
  static var codec: FlutterStandardMessageCodec { FlutterZebraRfidPigeonCodec.shared }
  /// Sets up an instance of `FlutterZebraRfid` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: FlutterZebraRfid?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    /// Returns list with names of available readers for specified `connectionType`.
    let updateAvailableReadersChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_zebra_rfid.FlutterZebraRfid.updateAvailableReaders\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      updateAvailableReadersChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let connectionTypeArg = args[0] as! ReaderConnectionType
        api.updateAvailableReaders(connectionType: connectionTypeArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      updateAvailableReadersChannel.setMessageHandler(nil)
    }
    /// Connects to a reader with `readerId` ID.
    let connectReaderChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_zebra_rfid.FlutterZebraRfid.connectReader\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      connectReaderChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let readerIdArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        api.connectReader(readerId: readerIdArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      connectReaderChannel.setMessageHandler(nil)
    }
    /// Configures reader with `config`.
    let configureReaderChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_zebra_rfid.FlutterZebraRfid.configureReader\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      configureReaderChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let configArg = args[0] as! ReaderConfig
        let shouldPersistArg = args[1] as! Bool
        api.configureReader(config: configArg, shouldPersist: shouldPersistArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      configureReaderChannel.setMessageHandler(nil)
    }
    /// Disconnects a reader with `readerName` name.
    let disconnectReaderChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_zebra_rfid.FlutterZebraRfid.disconnectReader\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      disconnectReaderChannel.setMessageHandler { _, reply in
        api.disconnectReader { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      disconnectReaderChannel.setMessageHandler(nil)
    }
    /// Trigger device status
    let triggerDeviceStatusChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_zebra_rfid.FlutterZebraRfid.triggerDeviceStatus\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      triggerDeviceStatusChannel.setMessageHandler { _, reply in
        api.triggerDeviceStatus { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      triggerDeviceStatusChannel.setMessageHandler(nil)
    }
    /// Reader currently in use
    let currentReaderChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_zebra_rfid.FlutterZebraRfid.currentReader\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      currentReaderChannel.setMessageHandler { _, reply in
        do {
          let result = try api.currentReader()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      currentReaderChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol FlutterZebraRfidCallbacksProtocol {
  func onAvailableReadersChanged(readers readersArg: [Reader], completion: @escaping (Result<Void, FlutterRfidError>) -> Void)
  func onReaderConnectionStatusChanged(status statusArg: ReaderConnectionStatus, completion: @escaping (Result<Void, FlutterRfidError>) -> Void)
  func onTagsRead(tags tagsArg: [RfidTag], completion: @escaping (Result<Void, FlutterRfidError>) -> Void)
  func onBatteryDataReceived(batteryData batteryDataArg: BatteryData, completion: @escaping (Result<Void, FlutterRfidError>) -> Void)
}
class FlutterZebraRfidCallbacks: FlutterZebraRfidCallbacksProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: FlutterZebraRfidPigeonCodec {
    return FlutterZebraRfidPigeonCodec.shared
  }
  func onAvailableReadersChanged(readers readersArg: [Reader], completion: @escaping (Result<Void, FlutterRfidError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.flutter_zebra_rfid.FlutterZebraRfidCallbacks.onAvailableReadersChanged\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([readersArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterRfidError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onReaderConnectionStatusChanged(status statusArg: ReaderConnectionStatus, completion: @escaping (Result<Void, FlutterRfidError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.flutter_zebra_rfid.FlutterZebraRfidCallbacks.onReaderConnectionStatusChanged\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([statusArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterRfidError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onTagsRead(tags tagsArg: [RfidTag], completion: @escaping (Result<Void, FlutterRfidError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.flutter_zebra_rfid.FlutterZebraRfidCallbacks.onTagsRead\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([tagsArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterRfidError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onBatteryDataReceived(batteryData batteryDataArg: BatteryData, completion: @escaping (Result<Void, FlutterRfidError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.flutter_zebra_rfid.FlutterZebraRfidCallbacks.onBatteryDataReceived\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([batteryDataArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterRfidError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
